from argparse import ArgumentParser
from ipaddress import ip_address, v6_int_to_packed
import json
from struct import unpack
import os


def parse_ip_port(s: str):
  ip, sep, port = s.rpartition(":")
  assert sep == ":"
  if ":" in ip:
    assert ip[0] == "[" and ip[-1] == "]"
    ip = ip[1:-1]
  port = int(port)
  assert 0 < port < 65536
  return ip_address(ip), port


def write_whitelist(config, name, parsed):
  v4 = tuple(
      zip(*[(int(ip), port) for ip, port in parsed if ip.version == 4]))
  v4_ip, v4_port = v4 if len(v4) == 2 else ((), ())
  config.write(
    f"static __u32 {name}_ipv4[] = "
    f"{{{', '.join([f'{i:#0{10}x}' for i in v4_ip])}}};\n"
    f"static __u16 {name}_ipv4_port[] = "
    f"{{{', '.join([str(i) for i in v4_port])}}};\n"
    f"static __u16 {name}_ipv4_count = {len(v4_ip)};\n\n")

  v6 = tuple(
    zip(*[(int(ip), port) for ip, port in parsed if ip.version == 6]))
  v6_ip, v6_port = v6 if len(v6) == 2 else ((), ())
  parts = [(y[0:8], y[8:16])
           for y in (v6_int_to_packed(int(x)) for x in v6_ip)]
  parts = [unpack("!Q", item)[0] for sublist in parts for item in sublist]
  config.write(
    f"static __be64 __{name}_ipv6_parts[] = "
    f"{{{', '.join(f'bpf_cpu_to_be64({hex(n)})' for n in parts)}}};\n"
    f"static struct in6_addr* {name}_ipv6 = (struct in6_addr*)__{name}_ipv6_parts;\n"
    f"static __u16 {name}_ipv6_port[] = "
    f"{{{', '.join([str(i) for i in v6_port])}}};\n"
    f"static __u16 {name}_ipv6_count = {len(v6_ip)};\n\n")


if __name__ == "__main__":
  parser = ArgumentParser(prog="gen_config.py")
  parser.add_argument("-e", "--allow-egress")
  parser.add_argument("-i", "--allow-ingress")
  parser.add_argument("-j", "--json")

  args = parser.parse_args()
  egress = args.allow_egress.split(",") if args.allow_egress else []
  ingress = args.allow_ingress.split(",") if args.allow_ingress else []
  json_path = args.json if args.json else None

  with open(f"{os.path.dirname(__file__)}/bpf/config.h", "w") as config:
    config.write("""// Generated by gen_config.py, do not modify!

#ifndef __MIMIC_CONFIG_H__
#define __MIMIC_CONFIG_H__

#include <linux/bpf.h>
#include <linux/in6.h>
#include <bpf/bpf_endian.h>

""")

    if json_path:
      with open(json_path) as config_file:
        config_json = json.loads(config_file.read())
        if "whitelist" in config_json:
          wl = config_json["whitelist"]
          if "egress" in wl:
            egress.extend(wl["egress"])
          if "ingress" in wl:
            ingress.extend(wl["egress"])

    write_whitelist(config, "egress_whitelist", [
        parse_ip_port(s) for s in egress])
    write_whitelist(config, "ingress_whitelist", [
        parse_ip_port(s) for s in ingress])

    config.write("#endif  // __MIMIC_CONFIG_H__\n")
